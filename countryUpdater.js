import axios from 'axios'

async function updateCountries() {
  const API_URL = process.env.BOTPRESS_API_URL       // https://api.botpress.cloud/v1/tables/TicketsTable/rows
  const BOT_ID = process.env.BOTPRESS_BOT_ID
  const WORKSPACE_ID = process.env.BOTPRESS_WORKSPACE_ID
  const BP_TOKEN = process.env.BOTPRESS_API_TOKEN
  const OPENAI_API_KEY = process.env.OPENAI_API_KEY

  const HEADERS = {
    Authorization: `Bearer ${BP_TOKEN}`,
    'x-bot-id': BOT_ID,
    'x-workspace-id': WORKSPACE_ID,
    'Content-Type': 'application/json'
  }

  const results = []
  let gptCalls = 0
  const rowsToRetry = []

  try {
    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    const fetchResponse = await axios.post(`${API_URL}/rows/find`, {
      limit: 1000
    }, { headers: HEADERS })

    const rows = fetchResponse?.data?.rows
    if (!Array.isArray(rows)) {
      throw new Error('Botpress response format error: rows is not an array')
    }

    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ Botpress –ø–æ–ª—É—á–µ–Ω—ã: ${rows.length} —Å—Ç—Ä–æ–∫(–∏)`)

    const rowsToUpdate = []
    const rowsToDelete = []

    for (const row of rows) {
      const rowId = row.id
      const city = row.City?.trim()

      if (!city) {
        rowsToDelete.push(rowId)
        results.push(`üóëÔ∏è Marked row ${rowId} for deletion (City is null)`)
        continue
      }

      gptCalls++
      let gptCountry = ''
      let gptCity = ''

      try {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ –≥–æ—Ä–æ–¥—É
        const gptCountryResp = await axios.post(
          'https://api.openai.com/v1/chat/completions',
          {
            model: 'gpt-4o-mini',
            temperature: 0,
            max_tokens: 10,
            messages: [
              {
                role: 'system',
                content: 'You are a helpful assistant. Given a city name or place, respond strictly with the name of the country it belongs to in English. Only return the country name (e.g. "Austria"). If you are unsure, respond with "Unknown".'
              },
              {
                role: 'user',
                content: `Which country does '${city}' belong to?`
              }
            ]
          },
          {
            headers: {
              Authorization: `Bearer ${OPENAI_API_KEY}`,
              'Content-Type': 'application/json'
            }
          }
        )
        gptCountry = gptCountryResp.data?.choices?.[0]?.message?.content?.trim()

        // 2. –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        const gptCityResp = await axios.post(
          'https://api.openai.com/v1/chat/completions',
          {
            model: 'gpt-4o-mini',
            temperature: 0,
            max_tokens: 20,
            messages: [
              {
                role: 'system',
                content: 'Return the English name of the given city or place. Only return the city name (e.g. "Vienna").'
              },
              {
                role: 'user',
                content: `What is the English name for '${city}'?`
              }
            ]
          },
          {
            headers: {
              Authorization: `Bearer ${OPENAI_API_KEY}`,
              'Content-Type': 'application/json'
            }
          }
        )
        gptCity = gptCityResp.data?.choices?.[0]?.message?.content?.trim()

      } catch (gptErr) {
        console.error(`‚ùå GPT API error for city '${city}':`, gptErr.response?.data || gptErr.message)
        results.push(`‚ùå GPT error for '${city}': ${gptErr.message}`)
        rowsToDelete.push(rowId)
        continue
      }

      if (!gptCountry || gptCountry.toLowerCase().includes('unknown')) {
        results.push(`‚ùå Could not determine country for '${city}', will retry with Requirements`)
        rowsToRetry.push(row)
        continue
      }

      const updatedRow = {
        id: rowId,
        Country: gptCountry
      }

      if (gptCity && !/unknown|don'?t know|invalid|not sure/i.test(gptCity)) {
        updatedRow.City = gptCity
      } else {
        results.push(`‚ö†Ô∏è GPT –≤–µ—Ä–Ω—É–ª —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è '${city}': '${gptCity}' ‚Äî –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ City`)
      }

      rowsToUpdate.push(updatedRow)
      results.push(`üìù Prepared row ${rowId} update: ${JSON.stringify(updatedRow)}`)
    }

    // üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ –ø–æ–ª—é Requirements
    for (const row of rowsToRetry) {
      const rowId = row.id
      const reqText = row.Requirements?.trim()
      if (!reqText) continue

      try {
        gptCalls++
        const gptRetryResp = await axios.post(
          'https://api.openai.com/v1/chat/completions',
          {
            model: 'gpt-4o-mini',
            temperature: 0,
            max_tokens: 10,
            messages: [
              {
                role: 'system',
                content: 'You are a helpful assistant. Based on the text of a job description, determine the country this job is likely located in. Only return the country name in English. If you are unsure, respond with "Unknown".'
              },
              {
                role: 'user',
                content: `Determine the country for this job: '${reqText}'`
              }
            ]
          },
          {
            headers: {
              Authorization: `Bearer ${OPENAI_API_KEY}`,
              'Content-Type': 'application/json'
            }
          }
        )

        const retryCountry = gptRetryResp.data?.choices?.[0]?.message?.content?.trim()

        if (retryCountry && retryCountry.toLowerCase() !== 'unknown') {
          rowsToUpdate.push({ id: rowId, Country: retryCountry })
          results.push(`üîÅ Updated via Requirements row ${rowId} with country: ${retryCountry}`)
        } else {
          results.push(`‚ö†Ô∏è Still could not determine country for row ${rowId}`)
        }
      } catch (err) {
        console.error(`‚ùå GPT retry error for row ${row.id}:`, err.response?.data || err.message)
        results.push(`‚ùå GPT retry error for row ${row.id}: ${err.message}`)
      }
    }

    // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    if (rowsToUpdate.length > 0) {
      try {
        const updateResp = await axios.put(`${API_URL}/rows`, { rows: rowsToUpdate }, { headers: HEADERS })
        console.log(`‚úÖ –ó–∞–ø–∏—Å–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${rowsToUpdate.length}`)
        results.push(`‚úÖ Updated ${rowsToUpdate.length} rows.`)

        if (updateResp.data?.errors?.length) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:`, updateResp.data.errors)
          results.push(`‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:\n${JSON.stringify(updateResp.data.errors)}`)
        }
      } catch (updateErr) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫:`, updateErr.response?.data || updateErr.message)
        results.push(`‚ùå Update error: ${updateErr.message}`)
      }
    } else {
      console.log(`‚ö†Ô∏è –û–±–Ω–æ–≤–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.`)
    }

    // 3. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    if (rowsToDelete.length > 0) {
      try {
        const deleteUrl = `${API_URL}/rows/delete`
        await axios.post(deleteUrl, { ids: rowsToDelete }, { headers: HEADERS })
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${rowsToDelete.length}`)
        results.push(`üóëÔ∏è Deleted ${rowsToDelete.length} rows.`)
      } catch (deleteErr) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫:`, deleteErr.response?.data || deleteErr.message)
        results.push(`‚ùå Delete error: ${deleteErr.message}`)
      }
    } else {
      console.log(`‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`)
    }

    console.log(`üì§ –í—Å–µ–≥–æ GPT-–≤—ã–∑–æ–≤–æ–≤: ${gptCalls}`)
    return results

  } catch (err) {
    console.error('‚ùå Unexpected error in updateCountries:', err)
    results.push(`‚ùå Unexpected error: ${err.message}`)
    return results
  }
}

export default updateCountries;
