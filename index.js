import express from 'express';
import fetch from 'node-fetch';

const app = express();
const port = process.env.PORT || 10000;
if (!port) {
  throw new Error("PORT is not defined");
}

app.use(express.json());

/**
 * –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ "‚úÖ OK"
 */
app.get('/', (req, res) => {
  res.send('‚úÖ OK');
});

/**
 * POST /check
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ—Ç, –∞ –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
 */
app.post('/check', async (req, res) => {
  // const { webhookUrl } = req.body;
  const webhookUrl = 'https://hook.eu2.make.com/g8kdpfddlaq70l31olejqx8ibtcpba9a'; // –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ
  console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–µ–π');

  // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
  res.send('üü¢ –ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É');

  // –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
  setTimeout(() => {
    processDuplicatesAndSendWebhook(webhookUrl);
  }, 0);
});

/**
 * –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ Botpress, –∏—â–µ—Ç –¥—É–±–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ webhook
 */
async function processDuplicatesAndSendWebhook(webhookUrl) {
  try {
    console.log('‚öôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É');

    const response = await fetch("https://api.botpress.cloud/v1/tables/TicketsTable/rows/find", {
      method: "POST",
      headers: {
        "Authorization": "bearer bp_pat_04UwT9GFhWqTk8w0pP2lozgJ73Z9SgRdtjw3",
        "x-bot-id": "278175a2-b203-4af3-a6be-b2952f74edec",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ limit: 500 })
    });

    if (!response.ok) {
      const text = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç Botpress:', text);
      return;
    }

    const result = await response.json();
    const tickets = result.rows || [];

    const groups = groupBy(tickets, t => `${t["Job categories"]}|||${t["Job sub categories"]}`);
    const toDelete = new Set();

console.time('‚è± –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π'); // üîç –Ω–∞—á–∞–ª–æ –∑–∞–º–µ—Ä–∞

    for (const groupTickets of Object.values(groups)) {
      const seenPairs = new Set();
      for (let i = 0; i < groupTickets.length; i++) {
        const t1 = groupTickets[i];
        for (let j = i + 1; j < groupTickets.length; j++) {
          const t2 = groupTickets[j];
          const key = [t1.id, t2.id].sort().join('-');
          if (seenPairs.has(key)) continue;
          seenPairs.add(key);

          const sim = similarity(t1.Requirements || '', t2.Requirements || '');
          if (sim >= 0.85) {
            let toRemove = t2;
            if (t1.Username === 'Anonymous participant' && t2.Username !== 'Anonymous participant') {
              toRemove = t1;
            } else if (t2.Username === 'Anonymous participant' && t1.Username !== 'Anonymous participant') {
              toRemove = t2;
            }
            toDelete.add(toRemove.id);
          }
        }
      }
    }

console.timeEnd('‚è± –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–µ–π'); // üîç –∫–æ–Ω–µ—Ü –∑–∞–º–µ—Ä–∞

    const payload = {
      duplicates: Array.from(toDelete),
      total: tickets.length,
      found: toDelete.size,
      timestamp: new Date().toISOString()
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ webhook
    const webhookResponse = await fetch(webhookUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–µ–±—Ö—É–∫:', webhookResponse.status);

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ:', err);
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞: –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É
 */
function groupBy(arr, fn) {
  return arr.reduce((acc, item) => {
    const key = fn(item);
    if (!acc[key]) acc[key] = [];
    acc[key].push(item);
    return acc;
  }, {});
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞: –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ (–ø–æ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω—É)
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1, –≥–¥–µ 1 ‚Äî –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
 */
function similarity(a, b) {
  a = (a || '').toLowerCase().replace(/\s+/g, ' ').trim();
  b = (b || '').toLowerCase().replace(/\s+/g, ' ').trim();
  if (a === b) return 1;

  const matrix = Array.from({ length: a.length + 1 }, () => Array(b.length + 1).fill(0));
  for (let i = 0; i <= a.length; i++) matrix[i][0] = i;
  for (let j = 0; j <= b.length; j++) matrix[0][j] = j;

  for (let i = 1; i <= a.length; i++) {
    for (let j = 1; j <= b.length; j++) {
      const cost = a[i - 1] === b[j - 1] ? 0 : 1;
      matrix[i][j] = Math.min(
        matrix[i - 1][j] + 1,
        matrix[i][j - 1] + 1,
        matrix[i - 1][j - 1] + cost
      );
    }
  }

  const distance = matrix[a.length][b.length];
  return 1 - distance / Math.max(a.length, b.length);
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, '0.0.0.0', () => {
  console.log(`‚úÖ Server is running on http://0.0.0.0:${port}`);
});
